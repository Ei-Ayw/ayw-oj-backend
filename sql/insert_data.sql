use yuoj;

INSERT INTO user (userAccount, userPassword, userName, userRole, userAvatar) VALUES
                                                                                 ('admin', 'e10adc3949ba59abbe56e057f20f883e', '系统管理员', 'admin', 'https://avatar.com/admin'),
                                                                                 ('banned_user', 'e10adc3949ba59abbe56e057f20f883e', '违规封禁用户', 'ban', 'https://avatar.com/banned'),
                                                                                 ('chen_yang', 'e10adc3949ba59abbe56e057f20f883e', '陈阳', 'user', 'https://avatar.com/chen_yang'),
                                                                                 ('liu_jing', 'e10adc3949ba59abbe56e057f20f883e', '刘静', 'user', 'https://avatar.com/liu_jing'),
                                                                                 ('zhang_hui', 'e10adc3949ba59abbe56e057f20f883e', '张辉', 'user', 'https://avatar.com/zhang_hui'),
                                                                                 ('wang_yue', 'e10adc3949ba59abbe56e057f20f883e', '王悦', 'user', 'https://avatar.com/wang_yue'),
                                                                                 ('li_xuan', 'e10adc3949ba59abbe56e057f20f883e', '李璇', 'user', 'https://avatar.com/li_xuan'),
                                                                                 ('zhou_hao', 'e10adc3949ba59abbe56e057f20f883e', '周浩', 'user', 'https://avatar.com/zhou_hao'),
                                                                                 ('wu_jia', 'e10adc3949ba59abbe56e057f20f883e', '吴佳', 'user', 'https://avatar.com/wu_jia'),
                                                                                 ('zheng_wei', 'e10adc3949ba59abbe56e057f20f883e', '郑伟', 'user', 'https://avatar.com/zheng_wei'),
                                                                                 ('hu_yu', 'e10adc3949ba59abbe56e057f20f883e', '胡宇', 'user', 'https://avatar.com/hu_yu'),
                                                                                 ('sun_yang', 'e10adc3949ba59abbe56e057f20f883e', '孙洋', 'user', 'https://avatar.com/sun_yang'),
                                                                                 ('xu_ting', 'e10adc3949ba59abbe56e057f20f883e', '徐婷', 'user', 'https://avatar.com/xu_ting'),
                                                                                 ('ma_chen', 'e10adc3949ba59abbe56e057f20f883e', '马晨', 'user', 'https://avatar.com/ma_chen'),
                                                                                 ('feng_jun', 'e10adc3949ba59abbe56e057f20f883e', '冯军', 'user', 'https://avatar.com/feng_jun'),
                                                                                 ('he_lei', 'e10adc3949ba59abbe56e057f20f883e', '何磊', 'user', 'https://avatar.com/he_lei'),
                                                                                 ('guo_min', 'e10adc3949ba59abbe56e057f20f883e', '郭敏', 'user', 'https://avatar.com/guo_min'),
                                                                                 ('lin_yun', 'e10adc3949ba59abbe56e057f20f883e', '林云', 'user', 'https://avatar.com/lin_yun'),
                                                                                 ('jiang_hao', 'e10adc3949ba59abbe56e057f20f883e', '江浩', 'user', 'https://avatar.com/jiang_hao'),
                                                                                 ('tan_yuan', 'e10adc3949ba59abbe56e057f20f883e', '谭媛', 'user', 'https://avatar.com/tan_yuan'),
                                                                                 ('liao_rui', 'e10adc3949ba59abbe56e057f20f883e', '廖锐', 'user', 'https://avatar.com/liao_rui'),
                                                                                 ('deng_jie', 'e10adc3949ba59abbe56e057f20f883e', '邓杰', 'user', 'https://avatar.com/deng_jie');

INSERT INTO question (title, content, tags, answer, judgeCase, judgeConfig, userId) VALUES
                                                                                        ('两数之和', '给定一个整数数组，找出和为目标值的两个数。', '["数组","哈希表"]', 'public class Solution {...}', '[{"input":"[2,7,11,15]\n9", "output":"[0,1]"}]', '{"timeLimit":1000, "memoryLimit": 256}', 1),
                                                                                        ('反转链表', '反转一个单链表。', '["链表"]', 'struct ListNode* reverseList(...)', '[{"input":"1->2->3->NULL", "output":"3->2->1->NULL"}]', '{"timeLimit":500, "memoryLimit": 128}', 3),
                                                                                        ('有效的括号', '判断字符串中的括号是否有效。', '["栈"]', 'bool isValid(string s) {...}', '[{"input":"()[]{}", "output":"true"}]', '{"timeLimit":300, "memoryLimit": 64}', 2),
                                                                                        ('二叉树遍历', '实现二叉树的前序遍历。', '["树"]', 'vector<int> preorderTraversal(TreeNode* root) {...}', '[{"input":"[1,null,2,3]", "output":"[1,2,3]"}]', '{"timeLimit":1000, "memoryLimit": 128}', 5),
                                                                                        ('最长公共子序列', '求两个字符串的最长公共子序列长度。', '["动态规划"]', 'int longestCommonSubsequence(...)', '[{"input":"abcde\nace", "output":"3"}]', '{"timeLimit":1500, "memoryLimit": 256}', 20),
                                                                                        ('爬楼梯', '假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？', '["动态规划"]', 'int climbStairs(int n) {...}', '[{"input":"3", "output":"3"}]', '{"timeLimit":500, "memoryLimit": 64}', 4),
                                                                                        ('合并两个有序链表', '将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。', '["链表"]', 'ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {...}', '[{"input":"1->2->4\n1->3->4", "output":"1->1->2->3->4->4"}]', '{"timeLimit":800, "memoryLimit": 128}', 6),
                                                                                        ('删除排序数组中的重复项', '给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。', '["数组","双指针"]', 'int removeDuplicates(vector<int>& nums) {...}', '[{"input":"[1,1,2]", "output":"2\n[1,2]"}]', '{"timeLimit":700, "memoryLimit": 128}', 7),
                                                                                        ('旋转数组', '给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。', '["数组"]', 'void rotate(vector<int>& nums, int k) {...}', '[{"input":"[1,2,3,4,5,6,7]\n3", "output":"[5,6,7,1,2,3,4]"}]', '{"timeLimit":900, "memoryLimit": 256}', 8),
                                                                                        ('买卖股票的最佳时机', '给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。', '["数组","动态规划"]', 'int maxProfit(vector<int>& prices) {...}', '[{"input":"[7,1,5,3,6,4]", "output":"5"}]', '{"timeLimit":1000, "memoryLimit": 128}', 9),
                                                                                        ('只出现一次的数字', '给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。', '["位运算","数组"]', 'int singleNumber(vector<int>& nums) {...}', '[{"input":"[2,2,1]", "output":"1"}]', '{"timeLimit":600, "memoryLimit": 64}', 10),
                                                                                        ('多数元素', '给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。', '["数组","哈希表"]', 'int majorityElement(vector<int>& nums) {...}', '[{"input":"[3,2,3]", "output":"3"}]', '{"timeLimit":700, "memoryLimit": 128}', 11),
                                                                                        ('搜索插入位置', '给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。你可以假设数组中无重复元素。', '["数组","二分查找"]', 'int searchInsert(vector<int>& nums, int target) {...}', '[{"input":"[1,3,5,6]\n5", "output":"2"}]', '{"timeLimit":600, "memoryLimit": 64}', 12),
                                                                                        ('二叉树的最大深度', '给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。', '["树","深度优先搜索"]', 'int maxDepth(TreeNode* root) {...}', '[{"input":"[3,9,20,null,null,15,7]", "output":"3"}]', '{"timeLimit":800, "memoryLimit": 128}', 13),
                                                                                        ('环形链表', '给定一个链表，判断链表中是否有环。如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。如果链表中存在环，则返回 true 。 否则，返回 false 。', '["链表","双指针"]', 'bool hasCycle(ListNode *head) {...}', '[{"input":"head = [3,2,0,-4], pos = 1", "output":"true"}]', '{"timeLimit":900, "memoryLimit": 128}', 14),
                                                                                        ('反转字符串', '编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。', '["双指针","字符串"]', 'void reverseString(vector<char>& s) {...}', '[{"input":"[\"h\",\"e\",\"l\",\"l\",\"o\"]", "output":"[\"o\",\"l\",\"l\",\"e\",\"h\"]"}]', '{"timeLimit":500, "memoryLimit": 64}', 16),
                                                                                        ('字符串中的第一个唯一字符', '给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。', '["哈希表","字符串"]', 'int firstUniqChar(string s) {...}', '[{"input":"s = \"leetcode\"", "output":"0"}]', '{"timeLimit":700, "memoryLimit": 128}', 17),
                                                                                        ('合并两个有序数组', '给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。', '["数组","双指针"]', 'void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {...}', '[{"input":"nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3", "output":"[1,2,2,3,5,6]"}]', '{"timeLimit":800, "memoryLimit": 128}', 18),
                                                                                        ('对称二叉树', '给定一个二叉树，检查它是否是镜像对称的。', '["树","深度优先搜索","广度优先搜索"]', 'bool isSymmetric(TreeNode* root) {...}', '[{"input":"[1,2,2,3,4,4,3]", "output":"true"}]', '{"timeLimit":900, "memoryLimit": 128}', 19),
                                                                                        ('移除元素', '给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。', '["数组","双指针"]', 'int removeElement(vector<int>& nums, int val) {...}', '[{"input":"[3,2,2,3]\n3", "output":"2\n[2,2]"}]', '{"timeLimit":700, "memoryLimit": 128}', 20);

INSERT INTO question_submit (language, code, status, questionId, userId) VALUES
                                                                             ('Java', 'public class Main { public static void main(String[] args) {...} }', 2, 1, 3),
                                                                             ('Python', 'print("Hello World")', 3, 2, 4),
                                                                             ('C++', '#include <iostream>\nusing namespace std;\nint main() {...}', 2, 3, 5),
                                                                             ('Python', 'def add(a, b): return a + b', 1, 4, 6),
                                                                             ('Java', 'class Solution { public int maxProfit(int[] prices) {...} }', 2, 5, 7),
                                                                             ('C#', 'using System;\nclass Program { static void Main() {...} }', 3, 6, 8),
                                                                             ('JavaScript', 'function factorial(n) { return n === 0 ? 1 : n * factorial(n - 1); }', 0, 7, 9),
                                                                             ('Go', 'package main\nimport "fmt"\nfunc main() {...}', 2, 8, 10),
                                                                             ('Python', 'class ListNode: pass\n\ndef reverseList(head):...', 1, 9, 11),
                                                                             ('Java', 'public class TreeNode {...}\nclass Solution { public List<Integer> preorderTraversal(TreeNode root) {...} }', 3, 10, 12),
                                                                             ('C++', 'struct TreeNode {...};\nvector<int> inorderTraversal(TreeNode* root) {...}', 2, 11, 13),
                                                                             ('JavaScript', 'function isValid(s) {...}', 0, 12, 14),
                                                                             ('Python', 'def climbStairs(n):...', 1, 13, 15),
                                                                             ('Java', 'class Solution { public int longestCommonSubsequence(String text1, String text2) {...} }', 2, 14, 16),
                                                                             ('C#', 'using System.Collections.Generic;\nclass Solution { public int[] twoSum(int[] nums, int target) {...} }', 3, 15, 17),
                                                                             ('JavaScript', 'function mergeTwoLists(l1, l2) {...}', 0, 16, 18),
                                                                             ('Go', 'package main\nfunc removeDuplicates(nums []int) int {...}', 2, 17, 19),
                                                                             ('Python', 'def rotate(nums, k):...', 1, 18, 20),
                                                                             ('Java', 'class Solution { public int singleNumber(int[] nums) {...} }', 3, 19, 1),
                                                                             ('C++', 'int majorityElement(vector<int>& nums) {...}', 2, 20, 2);